using UnityEngine;
using UnityEngine.UIElements;

public class ThemeController : MonoBehaviour
{
    [Header("Style Sheets")]
    public StyleSheet lightTheme;
    public StyleSheet darkTheme;
    public StyleSheet typography;
    public StyleSheet utilities;
    
    private VisualElement root;
    private Button themeToggle;
    private bool isDarkMode = false;
    
    void Start()
    {
        var uiDocument = GetComponent<UIDocument>();
        root = uiDocument.rootVisualElement;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏
        root.styleSheets.Add(typography);
        root.styleSheets.Add(utilities);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ApplyTheme(false);
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
        themeToggle = root.Q<Button>("theme-toggle");
        if (themeToggle != null)
        {
            themeToggle.clicked += ToggleTheme;
        }
    }
    
    void ToggleTheme()
    {
        isDarkMode = !isDarkMode;
        ApplyTheme(isDarkMode);
    }
    
    void ApplyTheme(bool darkMode)
    {
        // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
        if (root.styleSheets.Contains(lightTheme))
            root.styleSheets.Remove(lightTheme);
        if (root.styleSheets.Contains(darkTheme))
            root.styleSheets.Remove(darkTheme);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
        if (darkMode)
        {
            root.styleSheets.Add(darkTheme);
            if (themeToggle != null)
                themeToggle.text = "‚òÄÔ∏è Switch to Light Theme";
        }
        else
        {
            root.styleSheets.Add(lightTheme);
            if (themeToggle != null)
                themeToggle.text = "üåô Switch to Dark Theme";
        }
        
        Debug.Log($"Applied {(darkMode ? "Dark" : "Light")} theme");
    }
}