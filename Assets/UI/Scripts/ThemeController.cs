using UnityEngine;
using UnityEngine.UIElements;

public class ThemeController : MonoBehaviour
{
    [Header("Style Sheets")]
    public StyleSheet lightTheme;
    public StyleSheet darkTheme;
    
    [Header("References")]
    public UIDocument uiDocument;
    
    private VisualElement root;
    private Button themeToggle;
    private bool isDarkTheme = false;
    
    void Start()
    {
        InitializeUI();
        ApplyLightTheme(); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
    }
    
    void InitializeUI()
    {
        if (uiDocument == null)
        {
            uiDocument = GetComponent<UIDocument>();
        }
        
        if (uiDocument != null)
        {
            root = uiDocument.rootVisualElement;
            if (root != null)
            {
                themeToggle = root.Q<Button>("theme-toggle");
                if (themeToggle != null)
                {
                    themeToggle.clicked += ToggleTheme;
                    Debug.Log("Theme toggle button –Ω–∞–π–¥–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
                }
                else
                {
                    Debug.LogWarning("Theme toggle button –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                }
            }
            else
            {
                Debug.LogError("rootVisualElement –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
        }
        else
        {
            Debug.LogError("UIDocument –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        }
    }

    public void ToggleTheme()
    {
        if (isDarkTheme)
        {
            ApplyLightTheme();
        }
        else
        {
            ApplyDarkTheme();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        if (themeToggle != null)
        {
            themeToggle.text = isDarkTheme ? "‚òÄÔ∏è Switch to Light Theme" : "üåô Switch to Dark Theme";
        }
    }
    
    void ApplyLightTheme()
    {
        if (root != null && lightTheme != null)
        {
            // –£–±–∏—Ä–∞–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É
            if (root.styleSheets.Contains(darkTheme))
            {
                root.styleSheets.Remove(darkTheme);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É
            if (!root.styleSheets.Contains(lightTheme))
            {
                root.styleSheets.Add(lightTheme);
            }
            
            isDarkTheme = false;
            Debug.Log("–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞");
        }
    }
    
    void ApplyDarkTheme()
    {
        if (root != null && darkTheme != null)
        {
            // –£–±–∏—Ä–∞–µ–º —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É
            if (root.styleSheets.Contains(lightTheme))
            {
                root.styleSheets.Remove(lightTheme);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É
            if (!root.styleSheets.Contains(darkTheme))
            {
                root.styleSheets.Add(darkTheme);
            }
            
            isDarkTheme = true;
            Debug.Log("–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞");
        }
    }
    
    [ContextMenu("Apply Light Theme")]
    void ApplyLightThemeFromContext()
    {
        ApplyLightTheme();
    }
    
    [ContextMenu("Apply Dark Theme")]
    void ApplyDarkThemeFromContext()
    {
        ApplyDarkTheme();
    }
    
    [ContextMenu("Toggle Theme")]
    void ToggleThemeFromContext()
    {
        ToggleTheme();
    }
}
